#!/bin/bash

export POSIXLY_CORRECT=yes
export LC_NUMERIC=en_US.UTF-8
print_help()
{
    echo "
            PŘÍKAZ může být jeden z:

            list-tick – výpis seznamu vyskytujících se burzovních symbolů, tzv. “tickerů”.
            profit – výpis celkového zisku z uzavřených pozic.
            pos – výpis hodnot aktuálně držených pozic seřazených sestupně dle hodnoty.
            last-price – výpis poslední známé ceny pro každý ticker.
            hist-ord – výpis histogramu počtu transakcí dle tickeru.
            graph-pos – výpis grafu hodnot držených pozic dle tickeru.
            -------------------------------------------------------------------------------
            FILTR může být kombinace následujících:

            -a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu (bez tohoto data). 
                DATETIME je formátu YYYY-MM-DD HH:MM:SS.
            -b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem (bez tohoto data).
            
            -t TICKER – jsou uvažovány pouze záznamy odpovídající danému tickeru. 
                Při více výskytech přepínače se bere množina všech uvedených tickerů.
            -w WIDTH – u výpisu grafů nastavuje jejich šířku, tedy délku nejdelšího řádku na WIDTH. 
                Tedy, WIDTH musí být kladné celé číslo. Více výskytů přepínače je chybné spuštění.
            -h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
    exit 0
}

UserInput=()

if [ -n "$1" ]                  # saving to an array, everything that the user entered
then
    for argv in "$@"
    do
        UserInput+=( "$argv" )
    done
else
    read FileName
    IFS='.' read -a array <<< $FileName
    if [ "gz" == "${array[-1]}" ]
    then
        gzip -d -c $FileName
        exit 0
    else
        cat $FileName
        exit 0
    fi
fi

Filtr=()
Commands="awk '{print \$0}'"    # default command
DATATIME1="1000-01-01 00:00:00" # countdown
DATATIME2="9999-12-12 12:12:12"
SORT="sort -u"                 # default sort
YesCom=0                        # switch to normal output without commands   
key=0                           # switch, if in addition to time filters there is also a filter, then the time function is disabled
quantityT=1                     # the required number of cycles for output, set in some functions 
width=0                         
FILTER="Filtr+=( \${UserInput[\$i]} ) ; Filtr+=( \${UserInput[\$i+1]} ) ; shift ; shift"

for ((i=0; i<${#UserInput[@]}; i++))    # creating filter lists, changing the commands variable to the desired command
do
    case ${UserInput[$i]} in

        -h | --help)
            print_help
            exit 0
            ;;
        -a)
            YesCom=$(($YesCom + 1))
            eval $FILTER
            DATATIME1="${UserInput[$i+1]}" 
            ;;
        -b)
            YesCom=$(($YesCom + 1))
            eval $FILTER
            DATATIME2="${UserInput[$i+1]}"     
            ;;
        -t)
            key=$(($key + 1)) ; YesCom=$(($YesCom + 1))
            eval $FILTER
            ;;
        -w)
            width=${UserInput[$i+1]} 
            shift; shift       
            ;;
        list-tick)
            Commands="awk -F \";\" '{print \$2}'" ; shift
            ;;
        profit)
            Commands="awk -F \";\" 'BEGIN {TOTL=0} 
            {
                
                if (\$3 == \"sell\")
                {
                    TOTL=((TOTL+(\$4*\$6)))
                }
                if (\$3 == \"buy\")
                {
                    TOTL=((TOTL-(\$4*\$6)))
                }
            } END {printf \"%.2f\n\", TOTL}'" ; shift
            ;;
        pos)
            Filtr+=( ${UserInput[$i]} )

            SORT="sort -r -k2 -t: -n"

            Commands="awk -F \";\" -v tick=\${arrayTick[\$i]} 'BEGIN{totl=0;summ=0;last=\"\"}
            {
                if (\$2 == tick)
                {
                    if (\$3 == \"sell\")
                    {
                        summ=((summ-\$6))
                    }
                    if (\$3 == \"buy\")
                    {
                        summ=((summ+\$6))
                    }
                    if (datetime < \$1)
                    {
                        last=\$4
                    }
                }
            }
            END{totl=((last*summ)); if (totl != 0)
            {
                printf \"%s\", tick;
                for(i=0;i<(10-length(tick));i++)
                {
                    printf \" \"
                };
                printf \":\";
                for(i=0;i<(8-length(int(totl)));i++)
                {
                    printf \" \"
                };
                printf \" %.2f\n\",totl;
            }}'"
            shift
            ;;

        last-price)
            Filtr+=( ${UserInput[$i]} )

            Commands="awk -F \";\" -v tick=\${arrayTick[\$i]} 'BEGIN{totl=0;summ=0;last=\"\"}
            {
                if (\$2 == tick)
                {
                    if (datetime < \$1)
                    {
                        last=\$4
                    }
                }
            }
            END{totl=last; if (last != 0)
            {
                printf \"%s\", tick;
                for(i=0;i<(10-length(tick));i++)
                {
                    printf \" \"
                };
                printf \":\";
                for(i=0;i<(4-length(int(last)));i++)
                {
                    printf \" \"
                };
                printf \" %.2f\n\",last;
            }}'"
            shift
            ;;
        graph-pos)
            Filtr+=( ${UserInput[$i]} )

            SORT="sort -u"

            Commands="awk -F \";\" -v tick=\${arrayTick[\$i]} -v w=\$width 'BEGIN{totl=0;summ=0;last=\"\"}
            {
                if (\$2 == tick)
                {
                    if (\$3 == \"sell\")
                    {
                        summ=((summ-\$6))
                    }
                    if (\$3 == \"buy\")
                    {
                        summ=((summ+\$6))
                    }
                    if (datetime < \$1)
                    {
                        last=\$4
                    }
                }
            }
            END{totl=((last*summ)); if (totl != 0)
            {
                if (w == 0)
                {
                    w=1000
                };
                graph=totl/w/1000;
                printf \"%s\", tick;
                for(i=0;i<(10-length(tick));i++)
                {
                    printf \" \";
                };
                printf \": \";
                if (graph > 0)
                {
                    b=int(graph);
                    if (b>w){b=w};
                    for(i=0;i<b;i++)
                    {
                        printf \"#\";
                    }
                };
                if (graph < 0)
                {
                    a=int(graph);
                    if (a<(0-w)){a=0-w};
                    for(i=a;i<0;i++)
                    {
                        printf \"!\";
                    }
                };
                printf \"\n\"
            }}'"
            shift
            ;;
        hist-ord)
            Filtr+=( ${UserInput[$i]} )

            Commands="awk -F \";\" -v tick=\${arrayTick[\$i]} -v w=\$width 'BEGIN{totl=0;summ=0;last=\"\"}
            {
                if (\$2 == tick)
                {
                    totl=((totl+1))
                }
            }
            END{ if (totl != 0)
            {
                if ( w == 0)
                {
                    w=1;
                };
                hist=totl/w;
                printf \"%s\", tick;
                for(i=0;i<(10-length(tick));i++)
                {
                    printf \" \"
                };
                printf \": \";
                for(i=0;i<hist;i++)
                {
                    printf \"#\"
                };
                printf \"\n\"
            }}'"
            shift
            ;;
    esac
done

IFS='.' read -a array <<< ${UserInput[-1]}
if [ "gz" == "${array[-1]}" ]                   # check for archive
then
    OpenFile="gzip -d -c ${UserInput[-1]}"
else
    if [ -e ${UserInput[-1]} ]                     # check for file existence
    then    
            FileName=$*
            OpenFile="cat \$FileName"
    else
        read FileName
        IFS='.' read -a array <<< $FileName
        if [ "gz" == "${array[-1]}" ]
        then
            OpenFile="gzip -d -c \$FileName"
        else
            OpenFile="cat \$FileName"
        fi
    fi
fi



Tikers=""
q=0
for ((i=0; i<${#Filtr[@]}; i++))                    # compiling a list of Tickets  
do
    case ${Filtr[$i]} in

        pos | last-price | graph-pos | hist-ord)
            allTickers=$(eval $OpenFile | awk -F ";" '{print $2}' | sort -u)
            a=$(echo $allTickers)
            IFS=' ' read -a arrayTick <<< $a

            quantityT=${#arrayTick[@]}

            ;;
        -t)
            if [ $q -eq 0 ]
            then
                Tikers=";${Filtr[$i+1]};"
                q=$(($q + 1))
            else
                Tikers+="|;${Filtr[$i+1]};"
                Filtr[$i]=0
                Filtr[$i+1]=0
            fi
            ;;
    esac
done

for ((i=0; i<${#Filtr[@]}; i++))                # combine file, filters and commands
do
    case ${Filtr[$i]} in

        -t) 
            for ((i=0; i<$quantityT; i++))
            do
                eval $OpenFile | sort -u | grep -E $Tikers | awk -F ";" -v a="$DATATIME1" -v b="$DATATIME2" '{
                    if((a<$1)&&(b>$1)){print $0}}'| eval $Commands 
            done | eval $SORT
            ;;
        -a | -b)
            if [ $key -eq 0 ]
            then
                for ((i=0; i<$quantityT; i++))
                do
                    eval $OpenFile | sort -u | awk -F ";" -v a="$DATATIME1" -v b="$DATATIME2" '{
                        if((a<$1)&&(b>$1)){print $0}}'| eval $Commands 
                done | eval $SORT
            fi
            key=$(($key + 1))
            continue
            ;;
    esac
done

if [ $YesCom -eq 0 ]                   #if there were no commands or filters
then
    for ((i=0; i<$quantityT; i++))
    do
        eval $OpenFile | sort -u | eval $Commands 
    done | eval $SORT
fi

exit 0